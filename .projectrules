# .projectrules - BDD Agent Specific Patterns

**Inicializado**: 2025-08-27 16:19:05  
**√öltima Atualiza√ß√£o**: 2025-08-27 16:45:42  
**Projeto**: BDD Agent - Sistema Python para gera√ß√£o de BDD com IA  
**Desenvolvedor**: Rafael Pelizza (PelizzAI)

---

## üéØ **Padr√µes Espec√≠ficos do Projeto BDD Agent**

### **Arquitetura e Estrutura**

#### **Organiza√ß√£o Modular Descoberta**
```python
# Padr√£o: Separa√ß√£o clara entre apresenta√ß√£o, l√≥gica e integra√ß√£o
src/
‚îú‚îÄ‚îÄ main.py                 # ‚úÖ Entry point - Streamlit UI only
‚îú‚îÄ‚îÄ bdd_generator/         # ‚úÖ Core business logic
‚îÇ   ‚îú‚îÄ‚îÄ generator.py       # ‚úÖ BDD orchestration
‚îÇ   ‚îî‚îÄ‚îÄ openai_client.py   # ‚úÖ External API wrapper
‚îú‚îÄ‚îÄ [auth|config|ui|utils]/ # üìã Placeholders bem organizados
```

#### **Responsabilidades Bem Definidas**
- **main.py**: APENAS interface Streamlit, delega√ß√£o para core
- **generator.py**: APENAS orquestra√ß√£o BDD, n√£o conhece UI
- **openai_client.py**: APENAS comunica√ß√£o API, n√£o conhece neg√≥cio

### **Padr√µes OpenAI Integration**

#### **API Key Validation Pattern**
```python
# Padr√£o espec√≠fico descoberto: valida√ß√£o sk- + length
def _validate_api_key_format(self, api_key: str) -> bool:
    cleaned_key = api_key.strip()
    return cleaned_key.startswith('sk-') and len(cleaned_key) >= 20

# UI: Valida√ß√£o em tempo real + feedback visual
if cleaned_key.startswith('sk-') and len(cleaned_key) >= 20:
    st.success("‚úÖ API Key configurada")
else:
    st.error("‚ùå Formato de API Key inv√°lido")
```

#### **Model Configuration Strategy**
```python
# Padr√£o: Modelos hardcoded com metadata rico
SUPPORTED_MODELS = {
    "gpt-4o-mini": {"name": "GPT-4o Mini", "max_tokens": 4096, "cost_per_1k": 0.00015},
    "gpt-4.1-mini": {"name": "GPT-4.1 Mini", "max_tokens": 4096, "cost_per_1k": 0.0001},
    # Novos modelos incluindo vers√µes futuras gpt-5-mini, gpt-4.1-nano
}
```

#### **Error Handling + Logging Pattern**
```python
# Padr√£o: Try-catch com logging estruturado + re-raise
try:
    response = self.client.chat.completions.create(...)
    logger.info(f"Tokens usados - Prompt: {usage.prompt_tokens}")
except Exception as e:
    logger.error(f"Erro na API OpenAI: {str(e)}")
    raise  # Always re-raise for caller handling
```

### **Streamlit UI Patterns**

#### **Layout Pattern Descoberto**
```python
# Padr√£o: Sidebar para config + main em colunas
with st.sidebar:
    # Configura√ß√µes IA, valida√ß√µes
    
col1, col2 = st.columns([1, 1])
with col1:
    # Input do usu√°rio
with col2:
    # Output/resultados
```

#### **State Management Pattern**
```python
# Padr√£o: session_state para configura√ß√µes + valida√ß√£o condicional
config = {
    "incluir_negativos": st.session_state.get("incluir_negativos", True),
    "casos_extremos": st.session_state.get("casos_extremos", False),
    "num_cenarios": st.session_state.get("num_cenarios", 3),
}
```

#### **Feedback Visual Pattern**
```python
# Padr√£o: Loading + Success/Error com contexto
with st.spinner("ü§ñ Gerando cen√°rios BDD..."):
    # Processing
    
if success:
    st.success("‚úÖ Cen√°rios gerados com sucesso!")
    st.markdown(result)
else:
    st.error(f"‚ùå Erro na gera√ß√£o: {str(e)}")
```

### **BDD-Specific Patterns**

#### **Gherkin Template Strategy**
```python
# Padr√£o: Template system prompt em portugu√™s + user prompt din√¢mico
system_prompt = """
Voc√™ √© um especialista em BDD...
Regras importantes:
1. Use SEMPRE portugu√™s brasileiro
2. Siga a estrutura: Funcionalidade, Cen√°rio, Dado, Quando, Ent√£o, E
"""

user_prompt = f"""Gere {num_scenarios} cen√°rios BDD para:
{user_story}
[Configura√ß√µes din√¢micas baseadas em flags]
"""
```

#### **Scenario Classification Logic**
```python
# Padr√£o: Keyword-based classification
negative_keywords = ["erro", "inv√°lido", "falha", "negativo", "incorreto"]
edge_keywords = ["limite", "extremo", "m√°ximo", "m√≠nimo", "vazio"]

# Busca em title + steps para classifica√ß√£o autom√°tica
```

#### **Parsing Strategy**
```python
# Padr√£o: Line-by-line parsing com state machine
current_scenario = None
current_steps = []

for line in lines:
    if line.startswith("Cen√°rio:"):
        # Save previous, start new
    elif line.startswith(("Dado", "Quando", "Ent√£o", "E", "Mas")):
        current_steps.append(line)
```

### **Quality Patterns Espec√≠ficos**

#### **Python Version Constraint**
```toml
# Padr√£o espec√≠fico: Exclus√£o da vers√£o 3.9.7
python = ">=3.9,<3.9.7 || >3.9.7,<4.0"
# Raz√£o: Poss√≠vel incompatibilidade conhecida
```

#### **Pydantic Model Pattern**
```python
# Padr√£o: Field descriptions em portugu√™s para self-documentation
class BDDScenario(BaseModel):
    title: str = Field(..., description="T√≠tulo do cen√°rio")
    steps: List[str] = Field(..., description="Lista de passos do cen√°rio")
    scenario_type: str = Field(default="positive", description="Tipo do cen√°rio")
```

#### **Testing Strategy Pattern**
```python
# Padr√£o: Mock OpenAI com response structure espec√≠fica
mock_client.chat.completions.create.return_value = Mock(
    choices=[Mock(message=Mock(content="Cen√°rio BDD exemplo"))],
    usage=Mock(prompt_tokens=100, completion_tokens=200)
)
```

### **Naming and Documentation**

#### **File Naming Convention**
- **snake_case**: generator.py, openai_client.py, conftest.py
- **Descriptive**: Nomes que indicam responsabilidade clara

#### **Class/Method Naming**
- **Classes**: PascalCase + Descriptive (BDDGenerator, OpenAIClientWrapper)
- **Methods**: snake_case + verb_noun (generate_scenarios, create_completion)
- **Private**: Single underscore (_create_system_prompt, _parse_scenarios)

#### **Docstring Pattern (Google Style)**
```python
def generate_scenarios(
    self,
    user_story: str,
    num_scenarios: int = 3,
) -> BDDResponse:
    """Gera cen√°rios BDD a partir de uma hist√≥ria do usu√°rio.

    Args:
        user_story: Hist√≥ria do usu√°rio em linguagem natural
        num_scenarios: N√∫mero de cen√°rios a gerar

    Returns:
        BDDResponse com os cen√°rios gerados

    Raises:
        Exception: Se houver erro na chamada da API
    """
```

---

## üöÄ **Decis√µes Arquiteturais Espec√≠ficas**

### **DA001 - Streamlit over FastAPI**
**Decis√£o**: Usar Streamlit para MVP ao inv√©s de FastAPI  
**Raz√£o**: Prototipagem r√°pida, foco em UX, menos c√≥digo boilerplate  
**Trade-off**: Single-user sessions vs. multi-user scalability

### **DA002 - OpenAI over Local Models**
**Decis√£o**: Integra√ß√£o direta com OpenAI API  
**Raz√£o**: Qualidade superior, menor complexidade de infra  
**Trade-off**: Depend√™ncia externa vs. controle total

### **DA003 - Pydantic for All Models**
**Decis√£o**: Usar Pydantic para toda valida√ß√£o de dados  
**Raz√£o**: Type safety, documenta√ß√£o autom√°tica, JSON serialization  
**Impact**: Zero tolerance para dados n√£o tipados

### **DA004 - No Database in MVP**
**Decis√£o**: Aplica√ß√£o stateless sem persist√™ncia  
**Raz√£o**: Simplicidade, deploy f√°cil, foco em core features  
**Future**: Database ser√° adicionado em vers√µes futuras

---

## üîß **Configura√ß√µes Preferidas**

### **Development Workflow**
- **Poetry** para dependency management (n√£o pip)
- **Black** line-length=88 (padr√£o do projeto)
- **MyPy** strict mode obrigat√≥rio
- **Pytest** com coverage ‚â•85%

### **Code Style Preferences**
- **Portuguese docstrings** para dom√≠nio espec√≠fico
- **English code/variables** para padr√µes t√©cnicos
- **Structured logging** com contexto
- **Exception re-raising** ap√≥s logging

### **UI/UX Preferences**
- **Wide layout** Streamlit para aproveitar espa√ßo
- **Emoji icons** para visual feedback (üß™, ‚úÖ, ‚ùå, ü§ñ)
- **Real-time validation** ao inv√©s de submit validation
- **Portuguese interface** para usu√°rio brasileiro

---

## üìä **Performance Patterns**

### **OpenAI API Optimization**
- **Timeout**: 30s default (n√£o muito baixo, n√£o muito alto)
- **Max tokens**: 2000 (suficiente para cen√°rios BDD)
- **Temperature**: 0.3 default (criatividade controlada)

### **UI Response Patterns**
- **st.spinner** para opera√ß√µes >1s
- **Session state** para evitar re-computa√ß√£o
- **Caching strategy** planejada para futuro

---

## üéØ **Evolution Guidelines**

### **When Adding Features**
1. **Manter separa√ß√£o** UI vs. Logic vs. Integration
2. **Usar Pydantic** para novos data models
3. **Documentar em portugu√™s** aspectos de neg√≥cio
4. **Testar com mock** para componentes externos

### **When Refactoring**
1. **Preservar interfaces** p√∫blicas existentes
2. **Manter backward compatibility** quando poss√≠vel
3. **Documentar breaking changes** no memory bank

### **Future Architecture Evolution**
1. **FastAPI backend** quando escalabilidade for necess√°ria
2. **Database layer** quando persist√™ncia for cr√≠tica
3. **Auth system** quando multi-user for implementado
4. **Cache layer** quando performance for gargalo

---

## üß™ **Padr√µes de Teste e Valida√ß√£o (Descobertos 2025-08-27)**

### **Testing Strategy Effective**
```python
# Padr√£o: Testes sist√™micos com m√∫ltiplas configura√ß√µes
TESTING_PATTERN = {
    "domains": ["Admin", "Banking", "Gaming"],  # Diversidade de contextos
    "models": ["gpt-5-mini", "gpt-4.1-mini", "gpt-4o-mini"],  # M√∫ltiplos modelos
    "configurations": {
        "creativity": [0.5, 0.6, 1.0],
        "scenarios": [1, 3, 5, 6],
        "types": ["positive", "negative", "edge_cases"]
    }
}
```

### **Model Configuration Evolution**
```python
# Padr√£o DESCOBERTO: Configura√ß√£o din√¢mica de modelos
MODELS_EVOLUTION = {
    "v0.1.0": ["gpt-4o-mini", "gpt-4-turbo", "gpt-3.5-turbo"],
    "v0.1.1": ["gpt-5-mini", "gpt-4.1-mini", "gpt-4o-mini"],  # ‚úÖ Atual
    "pattern": "Sempre 3 modelos, com 1 padr√£o + 2 alternativos"
}

# ‚úÖ REGRA: Sempre manter gpt-*o-mini como fallback confi√°vel
# ‚úÖ REGRA: Novo modelo mais avan√ßado como padr√£o (gpt-5-mini)
# ‚úÖ REGRA: Interface permite sele√ß√£o f√°cil entre modelos
```

### **Download Format Strategy**
```python
# Padr√£o DESCOBERTO: Flexibilidade de formato baseado em contexto
DOWNLOAD_STRATEGY = {
    "v0.1.0": ".feature",  # Gherkin espec√≠fico
    "v0.1.1": ".txt",      # ‚úÖ Mais universal e flex√≠vel
    "reasoning": "Facilita integra√ß√£o com ferramentas diversas"
}
```

### **Error Handling Evolution**
```python
# Padr√£o DESCOBERTO: Debugging incremental durante testes
ERROR_PATTERNS_FIXED = {
    "api_key_passing": "BDDGenerator(api_key, model) vs BDDGenerator(wrapper)",
    "model_attributes": "scenario.title vs scenario.name alignment", 
    "download_format": "Consistent .txt generation",
    "lesson": "Testes abrangentes revelam inconsist√™ncias arquiteturais"
}
```

---

## üìä **M√©tricas de Qualidade Estabelecidas**

### **Testing Quality Benchmarks**
```python
QUALITY_METRICS = {
    "functionality": 100,      # ‚úÖ Todas features funcionando
    "usability": 95,          # ‚úÖ Interface intuitiva
    "performance": 90,        # ‚úÖ Tempos adequados
    "versatility": 100,       # ‚úÖ M√∫ltiplos dom√≠nios
    "robustness": 95,         # ‚úÖ Error handling
    "overall_score": 97       # ‚úÖ Excel√™ncia t√©cnica
}
```

### **Validation Standards**
- **SEMPRE** testar m√∫ltiplos dom√≠nios (m√≠nimo 3 diferentes)
- **SEMPRE** validar download functionality ap√≥s mudan√ßas
- **SEMPRE** testar todos os modelos dispon√≠veis
- **SEMPRE** incluir cen√°rios edge cases nos testes

---

**üéØ IMPORTANTE**: Estes padr√µes foram descobertos atrav√©s da an√°lise da base de c√≥digo existente e testes extensivos realizados em 2025-08-27. Eles refletem as decis√µes e prefer√™ncias j√° implementadas pelo desenvolvedor Rafael Pelizza, validadas atrav√©s de testes pr√°ticos.
